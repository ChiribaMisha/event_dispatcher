const app = require('../app');
const debug = require('debug')('event_dispatcher:server');
const http = require('http');
const mongoose = require('mongoose');
const { dbhost, dbname, dbport, options } = require('../config/db');

(() => {
  mongoose.connect(`mongodb://${dbhost}:${dbport}/${dbname}`, options);
  const db = mongoose.connection;

  db.once('error', (err) => {
    console.log('DB ERROR:', err);
  });

  db.once('open', () => {
    console.log(`Connected to DB, ${dbhost}:${dbport}`);
  });

  db.once('close', () => {
    console.log('Close DB connection....');
  });
})();

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Listening on ${port}`);
}
